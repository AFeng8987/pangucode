<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.linlinjava.litemall.db.dao.LitemallNodeRelationMapper">
  <resultMap id="BaseResultMap" type="org.linlinjava.litemall.db.domain.LitemallNodeRelation">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="ancestor" jdbcType="INTEGER" property="ancestor" />
    <result column="descendant" jdbcType="INTEGER" property="descendant" />
    <result column="distance" jdbcType="TINYINT" property="distance" />
    <result column="node_flag" jdbcType="BIT" property="nodeFlag" />
  </resultMap>

  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, ancestor, descendant, distance, node_flag
  </sql>
  <select id="selectByExample" parameterType="org.linlinjava.litemall.db.domain.LitemallNodeRelationExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from litemall_node_relation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from litemall_node_relation
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    from litemall_node_relation
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from litemall_node_relation
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from litemall_node_relation
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.linlinjava.litemall.db.domain.LitemallNodeRelationExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from litemall_node_relation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.linlinjava.litemall.db.domain.LitemallNodeRelation">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into litemall_node_relation (ancestor, descendant, distance,
      node_flag)
    values (#{ancestor,jdbcType=INTEGER}, #{descendant,jdbcType=INTEGER}, #{distance,jdbcType=TINYINT},
      #{nodeFlag,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="org.linlinjava.litemall.db.domain.LitemallNodeRelation">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into litemall_node_relation
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="ancestor != null">
        ancestor,
      </if>
      <if test="descendant != null">
        descendant,
      </if>
      <if test="distance != null">
        distance,
      </if>
      <if test="nodeFlag != null">
        node_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="ancestor != null">
        #{ancestor,jdbcType=INTEGER},
      </if>
      <if test="descendant != null">
        #{descendant,jdbcType=INTEGER},
      </if>
      <if test="distance != null">
        #{distance,jdbcType=TINYINT},
      </if>
      <if test="nodeFlag != null">
        #{nodeFlag,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.linlinjava.litemall.db.domain.LitemallNodeRelationExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from litemall_node_relation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update litemall_node_relation
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.ancestor != null">
        ancestor = #{record.ancestor,jdbcType=INTEGER},
      </if>
      <if test="record.descendant != null">
        descendant = #{record.descendant,jdbcType=INTEGER},
      </if>
      <if test="record.distance != null">
        distance = #{record.distance,jdbcType=TINYINT},
      </if>
      <if test="record.nodeFlag != null">
        node_flag = #{record.nodeFlag,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update litemall_node_relation
    set id = #{record.id,jdbcType=INTEGER},
      ancestor = #{record.ancestor,jdbcType=INTEGER},
      descendant = #{record.descendant,jdbcType=INTEGER},
      distance = #{record.distance,jdbcType=TINYINT},
      node_flag = #{record.nodeFlag,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.linlinjava.litemall.db.domain.LitemallNodeRelation">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update litemall_node_relation
    <set>
      <if test="ancestor != null">
        ancestor = #{ancestor,jdbcType=INTEGER},
      </if>
      <if test="descendant != null">
        descendant = #{descendant,jdbcType=INTEGER},
      </if>
      <if test="distance != null">
        distance = #{distance,jdbcType=TINYINT},
      </if>
      <if test="nodeFlag != null">
        node_flag = #{nodeFlag,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.linlinjava.litemall.db.domain.LitemallNodeRelation">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update litemall_node_relation
    set ancestor = #{ancestor,jdbcType=INTEGER},
      descendant = #{descendant,jdbcType=INTEGER},
      distance = #{distance,jdbcType=TINYINT},
      node_flag = #{nodeFlag,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="org.linlinjava.litemall.db.domain.LitemallNodeRelationExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    from litemall_node_relation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from litemall_node_relation
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>

  <!-- 邀请关系插入一条新的用户时，继承父类所有节点关系，并且新增所有相关关系到链里面来 -->
  <insert id="insertNewNodeRelation" keyColumn="id"
          keyProperty="id" parameterType="java.lang.Integer"
          useGeneratedKeys="true">
    <selectKey keyProperty="id" order="AFTER"
               resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into
    litemall_node_relation(ancestor,descendant,distance,node_flag)
    select t.ancestor,
    #{newUserId,jdbcType=INTEGER},t.distance+1,t.node_flag
    from
    litemall_node_relation as t
    where t.descendant =
    #{parentId,jdbcType=INTEGER}
    union all
    select #{newUserId,jdbcType=INTEGER},#{newUserId,jdbcType=INTEGER},0,0
  </insert>


  <!-- 邀请关系插入一条旧的用户与邀请码这个人的关系.-->
  <insert id="addParentNodeRelation" keyColumn="id"
          keyProperty="id" parameterType="java.lang.Integer"
          useGeneratedKeys="true">
    <selectKey keyProperty="id" order="AFTER"
               resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into
    litemall_node_relation(ancestor,descendant,distance,node_flag)
    select t.ancestor,
    #{userId,jdbcType=INTEGER},t.distance+1,t.node_flag
    from
    litemall_node_relation as t
    where t.descendant =
    #{parentId,jdbcType=INTEGER}
  </insert>

  <delete id="deleteAllByPrimaryKey" parameterType="java.lang.Integer">
    delete from litemall_node_relation where
    ancestor in
    <foreach item="ancestor" collection="ancestors" open="(" separator="," close=")">
      ${ancestor}
    </foreach>
    and descendant in
    <foreach item="descendant" collection="descendants" open="(" separator="," close=")">
      ${descendant}
    </foreach>
  </delete>

  <select id="selAncestor" resultMap="BaseResultMap">
    select * from litemall_node_relation where descendant = #{userId}
    ORDER BY ancestor asc
    limit 1
  </select>

  <select id="selFatherList" resultMap="BaseResultMap">
    SELECT * FROM litemall_node_relation WHERE descendant = #{userId} and distance != 0
  </select>

  <select id="selChildList" resultMap="BaseResultMap">
    SELECT * FROM litemall_node_relation WHERE ancestor = #{userId} and distance != 0
  </select>

  <update id="updateAllByPrimaryKey">
    update litemall_node_relation set ancestor = #{newAncestors}
    where id in
    <foreach item="item" collection="ids" separator="," open="(" close=")" index="index">
      #{item}
    </foreach>

  </update>

  <select id="selOneSelf" resultMap="BaseResultMap">
    select * from litemall_node_relation where ancestor = #{userId} and descendant = #{userId}
  </select>

  <select id="selRootNode" resultMap="BaseResultMap">
    SELECT * FROM litemall_node_relation
    WHERE descendant = #{userId} and distance != 0
    ORDER BY distance desc limit 1
  </select>
</mapper>
