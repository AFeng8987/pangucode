<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.linlinjava.litemall.db.dao.NodeRelationMapper">
    <resultMap id="BaseResultMap" type="org.linlinjava.litemall.db.domain.LitemallNodeRelation">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="ancestor" jdbcType="INTEGER" property="ancestor"/>
        <result column="descendant" jdbcType="INTEGER" property="descendant"/>
        <result column="distance" jdbcType="TINYINT" property="distance"/>
        <result column="node_flag" jdbcType="BIT" property="nodeFlag"/>
    </resultMap>


    <!-- 邀请关系插入一条新的用户时，继承父类所有节点关系，并且新增所有相关关系到链里面来 -->
    <insert id="insertNewNodeRelation" keyColumn="id"
            keyProperty="id" parameterType="java.lang.Integer"
            useGeneratedKeys="true">
        <selectKey keyProperty="id" order="AFTER"
                   resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into
        litemall_node_relation(ancestor,descendant,distance,node_flag)
        select t.ancestor,
        #{newUserId,jdbcType=INTEGER},t.distance+1,t.node_flag
        from
        litemall_node_relation as t
        where t.descendant =
        #{parentId,jdbcType=INTEGER}
        union all
        select #{newUserId,jdbcType=INTEGER},#{newUserId,jdbcType=INTEGER},0,0
    </insert>


    <!-- 邀请关系插入一条旧的用户与邀请码这个人的关系.-->
    <insert id="addParentNodeRelation" keyColumn="id"
            keyProperty="id" parameterType="java.lang.Integer"
            useGeneratedKeys="true">
        <selectKey keyProperty="id" order="AFTER"
                   resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into
        litemall_node_relation(ancestor,descendant,distance,node_flag)
        select t.ancestor,
        #{userId,jdbcType=INTEGER},t.distance+1,t.node_flag
        from
        litemall_node_relation as t
        where t.descendant =
        #{parentId,jdbcType=INTEGER}
    </insert>

    <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
        insert into litemall_node_relation
        (ancestor, descendant, distance, node_flag)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.ancestor,jdbcType=INTEGER}, #{item.descendant,jdbcType=INTEGER}, #{item.distance,jdbcType=TINYINT},
            #{item.nodeFlag,jdbcType=TINYINT})
        </foreach>
    </insert>
    <select id="subordinateUser" resultType="java.util.Map">
       select u.id, u.nickname as nickName,u.username as userName,
       IF(u.referral_user_id = 0,'--',u2.nickName) AS parentNickName,
       IF(u.referral_user_id = 0,'--',u2.username) AS parentUserName,
       DATE_FORMAT(u.add_time,'%Y-%m-%d %H:%i:%s')  as addTime
       from
       litemall_node_relation n
       left JOIN litemall_user u ON u.id=n.descendant
       left JOIN litemall_user u2 ON u2.id=u.referral_user_id
       where
       n.ancestor=#{userId,jdbcType=INTEGER} and n.distance =1 and u.deleted=0
    </select>
    <select id="nonSubordinateUser" resultType="java.util.Map">
       select u.id, u.nickname as nickName,u.username as userName,
       IF(u.referral_user_id = 0,'--',u2.nickName) AS parentNickName,
       IF(u.referral_user_id = 0,'--',u2.username) AS parentUserName,
       DATE_FORMAT(u.add_time,'%Y-%m-%d %H:%i:%s')  as addTime
       from
       litemall_node_relation n
       left JOIN litemall_user u ON u.id=n.descendant
       left JOIN litemall_user u2 ON u2.id=u.referral_user_id
       where
       n.ancestor=#{userId,jdbcType=INTEGER} and n.distance not in(0,1) and u.deleted=0
    </select>
</mapper>
