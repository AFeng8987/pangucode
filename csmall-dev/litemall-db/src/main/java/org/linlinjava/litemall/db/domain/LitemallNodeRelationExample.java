package org.linlinjava.litemall.db.domain;

import java.util.ArrayList;
import java.util.List;

public class LitemallNodeRelationExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public LitemallNodeRelationExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public LitemallNodeRelationExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public LitemallNodeRelationExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        LitemallNodeRelationExample example = new LitemallNodeRelationExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public LitemallNodeRelationExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public LitemallNodeRelationExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andIdEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("id = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andIdNotEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("id <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andIdGreaterThanColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("id > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andIdGreaterThanOrEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("id >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andIdLessThanColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("id < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andIdLessThanOrEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("id <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andAncestorIsNull() {
            addCriterion("ancestor is null");
            return (Criteria) this;
        }

        public Criteria andAncestorIsNotNull() {
            addCriterion("ancestor is not null");
            return (Criteria) this;
        }

        public Criteria andAncestorEqualTo(Integer value) {
            addCriterion("ancestor =", value, "ancestor");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andAncestorEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("ancestor = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAncestorNotEqualTo(Integer value) {
            addCriterion("ancestor <>", value, "ancestor");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andAncestorNotEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("ancestor <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAncestorGreaterThan(Integer value) {
            addCriterion("ancestor >", value, "ancestor");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andAncestorGreaterThanColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("ancestor > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAncestorGreaterThanOrEqualTo(Integer value) {
            addCriterion("ancestor >=", value, "ancestor");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andAncestorGreaterThanOrEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("ancestor >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAncestorLessThan(Integer value) {
            addCriterion("ancestor <", value, "ancestor");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andAncestorLessThanColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("ancestor < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAncestorLessThanOrEqualTo(Integer value) {
            addCriterion("ancestor <=", value, "ancestor");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andAncestorLessThanOrEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("ancestor <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andAncestorIn(List<Integer> values) {
            addCriterion("ancestor in", values, "ancestor");
            return (Criteria) this;
        }

        public Criteria andAncestorNotIn(List<Integer> values) {
            addCriterion("ancestor not in", values, "ancestor");
            return (Criteria) this;
        }

        public Criteria andAncestorBetween(Integer value1, Integer value2) {
            addCriterion("ancestor between", value1, value2, "ancestor");
            return (Criteria) this;
        }

        public Criteria andAncestorNotBetween(Integer value1, Integer value2) {
            addCriterion("ancestor not between", value1, value2, "ancestor");
            return (Criteria) this;
        }

        public Criteria andDescendantIsNull() {
            addCriterion("descendant is null");
            return (Criteria) this;
        }

        public Criteria andDescendantIsNotNull() {
            addCriterion("descendant is not null");
            return (Criteria) this;
        }

        public Criteria andDescendantEqualTo(Integer value) {
            addCriterion("descendant =", value, "descendant");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andDescendantEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("descendant = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDescendantNotEqualTo(Integer value) {
            addCriterion("descendant <>", value, "descendant");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andDescendantNotEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("descendant <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDescendantGreaterThan(Integer value) {
            addCriterion("descendant >", value, "descendant");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andDescendantGreaterThanColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("descendant > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDescendantGreaterThanOrEqualTo(Integer value) {
            addCriterion("descendant >=", value, "descendant");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andDescendantGreaterThanOrEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("descendant >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDescendantLessThan(Integer value) {
            addCriterion("descendant <", value, "descendant");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andDescendantLessThanColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("descendant < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDescendantLessThanOrEqualTo(Integer value) {
            addCriterion("descendant <=", value, "descendant");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andDescendantLessThanOrEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("descendant <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDescendantIn(List<Integer> values) {
            addCriterion("descendant in", values, "descendant");
            return (Criteria) this;
        }

        public Criteria andDescendantNotIn(List<Integer> values) {
            addCriterion("descendant not in", values, "descendant");
            return (Criteria) this;
        }

        public Criteria andDescendantBetween(Integer value1, Integer value2) {
            addCriterion("descendant between", value1, value2, "descendant");
            return (Criteria) this;
        }

        public Criteria andDescendantNotBetween(Integer value1, Integer value2) {
            addCriterion("descendant not between", value1, value2, "descendant");
            return (Criteria) this;
        }

        public Criteria andDistanceIsNull() {
            addCriterion("distance is null");
            return (Criteria) this;
        }

        public Criteria andDistanceIsNotNull() {
            addCriterion("distance is not null");
            return (Criteria) this;
        }

        public Criteria andDistanceEqualTo(Byte value) {
            addCriterion("distance =", value, "distance");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andDistanceEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("distance = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDistanceNotEqualTo(Byte value) {
            addCriterion("distance <>", value, "distance");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andDistanceNotEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("distance <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDistanceGreaterThan(Byte value) {
            addCriterion("distance >", value, "distance");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andDistanceGreaterThanColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("distance > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDistanceGreaterThanOrEqualTo(Byte value) {
            addCriterion("distance >=", value, "distance");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andDistanceGreaterThanOrEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("distance >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDistanceLessThan(Byte value) {
            addCriterion("distance <", value, "distance");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andDistanceLessThanColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("distance < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDistanceLessThanOrEqualTo(Byte value) {
            addCriterion("distance <=", value, "distance");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andDistanceLessThanOrEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("distance <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andDistanceIn(List<Byte> values) {
            addCriterion("distance in", values, "distance");
            return (Criteria) this;
        }

        public Criteria andDistanceNotIn(List<Byte> values) {
            addCriterion("distance not in", values, "distance");
            return (Criteria) this;
        }

        public Criteria andDistanceBetween(Byte value1, Byte value2) {
            addCriterion("distance between", value1, value2, "distance");
            return (Criteria) this;
        }

        public Criteria andDistanceNotBetween(Byte value1, Byte value2) {
            addCriterion("distance not between", value1, value2, "distance");
            return (Criteria) this;
        }

        public Criteria andNodeFlagIsNull() {
            addCriterion("node_flag is null");
            return (Criteria) this;
        }

        public Criteria andNodeFlagIsNotNull() {
            addCriterion("node_flag is not null");
            return (Criteria) this;
        }

        public Criteria andNodeFlagEqualTo(Boolean value) {
            addCriterion("node_flag =", value, "nodeFlag");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andNodeFlagEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("node_flag = ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNodeFlagNotEqualTo(Boolean value) {
            addCriterion("node_flag <>", value, "nodeFlag");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andNodeFlagNotEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("node_flag <> ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNodeFlagGreaterThan(Boolean value) {
            addCriterion("node_flag >", value, "nodeFlag");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andNodeFlagGreaterThanColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("node_flag > ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNodeFlagGreaterThanOrEqualTo(Boolean value) {
            addCriterion("node_flag >=", value, "nodeFlag");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andNodeFlagGreaterThanOrEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("node_flag >= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNodeFlagLessThan(Boolean value) {
            addCriterion("node_flag <", value, "nodeFlag");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andNodeFlagLessThanColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("node_flag < ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNodeFlagLessThanOrEqualTo(Boolean value) {
            addCriterion("node_flag <=", value, "nodeFlag");
            return (Criteria) this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria andNodeFlagLessThanOrEqualToColumn(LitemallNodeRelation.Column column) {
            addCriterion(new StringBuilder("node_flag <= ").append(column.getEscapedColumnName()).toString());
            return (Criteria) this;
        }

        public Criteria andNodeFlagIn(List<Boolean> values) {
            addCriterion("node_flag in", values, "nodeFlag");
            return (Criteria) this;
        }

        public Criteria andNodeFlagNotIn(List<Boolean> values) {
            addCriterion("node_flag not in", values, "nodeFlag");
            return (Criteria) this;
        }

        public Criteria andNodeFlagBetween(Boolean value1, Boolean value2) {
            addCriterion("node_flag between", value1, value2, "nodeFlag");
            return (Criteria) this;
        }

        public Criteria andNodeFlagNotBetween(Boolean value1, Boolean value2) {
            addCriterion("node_flag not between", value1, value2, "nodeFlag");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table litemall_node_relation
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        private LitemallNodeRelationExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        protected Criteria(LitemallNodeRelationExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public LitemallNodeRelationExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        @Deprecated
        public Criteria andIf(boolean ifAdd, ICriteriaAdd add) {
            if (ifAdd) {
                add.add(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }

        @Deprecated
        public interface ICriteriaAdd {
            /**
             * This method was generated by MyBatis Generator.
             * This method corresponds to the database table litemall_node_relation
             *
             * @mbg.generated
             */
            Criteria add(Criteria add);
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table litemall_node_relation
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table litemall_node_relation
         *
         * @mbg.generated
         */
        void example(org.linlinjava.litemall.db.domain.LitemallNodeRelationExample example);
    }
}